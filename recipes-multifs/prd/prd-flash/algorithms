ALGORITHMS="@ALGORITHMS@"
EXPECTED_CONTENT="@EXPECTED_CONTENT@"

size () {
    stat -c %s $1
}

md5 () {
    openssl dgst -md5 -hex -r $1 | awk '{print $1}'
}

rmd160 () {
    openssl dgst -ripemd160 -hex -r $1 | awk '{print $1}'
}

sha1 () {
    openssl dgst -sha1 -hex -r $1 | awk '{print $1}'
}

prove_fail () {
    echo "Proving $1 fails for $2: $3 != $4" >&2
    logger -s "Proving $1 fails for $2: $3 != $4"
    trigger_fail
}

prove_image () {
    test "${EXPECTED_CONTENT}" = "${CONTAINS}" || prove_fail "expected content" "image definition" "${EXPECTED_CONTENT}" "${CONTAINS}"
    for cmp in ${EXPECTED_CONTENT}
    do
        if [ $cmp = "KERNEL" ]
        then
            for a in $ALGORITHMS
            do
                S=""
                K=""
                for k in ${KERNEL}
                do
                    K="${K}${S}`$a ${IMAGE_CONTAINER}/${k}`"
                    S=" "
                done
                eval "kernel_${a}=\"$K\""
                A=$(echo $a | tr a-z A-Z)
                test "$(eval echo \$KERNEL_${A})" = "$(eval echo \$kernel_${a})" || prove_fail $k $a $(echo KERNEL_${A}) $(echo kernel_${a})
            done
        else
            for f in "${cmp}" "${cmp}_BIN"
            do
                test -z $(eval echo "\$$f") && continue
                CMP=$(eval echo "\$$f")
                break
            done
            test -z "${CMP}" && prove_fail $cmp "resolving" "..." "..."
            for a in $ALGORITHMS
            do
                A=$(echo $a | tr a-z A-Z)
                c="$(eval $a ${IMAGE_CONTAINER}/${CMP})"
                test "$(eval echo \$${cmp}_${A})" = "$c" || eval echo "prove_fail ${CMP} ${a} \$${cmp}_${A} $c"
            done
        fi
    done
}
