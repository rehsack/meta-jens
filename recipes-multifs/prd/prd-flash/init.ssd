prepare_device () {
    BOOT_SPACE="8192"
    IMAGE_ROOTFS_ALIGNMENT="4096"

    BOOTFS_SIZE=$(expr 1024 \* 32)

    SDCARD_SIZE=`fdisk -l $DEVICE_PATH | grep "Disk $DEVICE_PATH" | awk '{print $5}'`
    SDCARD_SIZE=$(expr $SDCARD_SIZE \/ 1024)

    ROOTFS_SIZE=$(expr 1024 \* 512)
    RECOVERY_SIZE=$(expr 1024 \* 128)
    if test "$DEV" -eq 1
    then
	ROOTFS_SIZE=$(expr 1024 \* 1024)
	RECOVERY_SIZE=$(expr 1024 \* 512)
    fi

    BOOT_SPACE_ALIGNED=$(expr ${BOOTFS_SIZE} + ${IMAGE_ROOTFS_ALIGNMENT} - 1)
    BOOT_SPACE_ALIGNED=$(expr ${BOOT_SPACE_ALIGNED} - ${BOOT_SPACE_ALIGNED} % ${IMAGE_ROOTFS_ALIGNMENT})

    BOOT_SPACE_START=${IMAGE_ROOTFS_ALIGNMENT}
    BOOT_SPACE_END=$(expr ${IMAGE_ROOTFS_ALIGNMENT} \+ ${BOOT_SPACE_ALIGNED})

    ROOTFS_SIZE_ALIGNED=$(expr ${ROOTFS_SIZE} + ${IMAGE_ROOTFS_ALIGNMENT} - 1)
    ROOTFS_SIZE_ALIGNED=$(expr ${ROOTFS_SIZE_ALIGNED} - ${ROOTFS_SIZE_ALIGNED} % ${IMAGE_ROOTFS_ALIGNMENT})

    ROOTFS_SPACE_START=${BOOT_SPACE_END}
    ROOTFS_SPACE_END=$(expr ${ROOTFS_SPACE_START} \+ ${ROOTFS_SIZE_ALIGNED})

    RECOVERY_SIZE_ALIGNED=$(expr ${RECOVERY_SIZE} + ${IMAGE_ROOTFS_ALIGNMENT} - 1)
    RECOVERY_SIZE_ALIGNED=$(expr ${RECOVERY_SIZE_ALIGNED} - ${RECOVERY_SIZE_ALIGNED} % ${IMAGE_ROOTFS_ALIGNMENT})

    RECOVERFS_SPACE_START=${ROOTFS_SPACE_END}
    RECOVERFS_SPACE_END=$(expr ${RECOVERFS_SPACE_START} \+ ${RECOVERY_SIZE_ALIGNED})

    # wipe them out ... all of them
    blkdiscard ${DEVICE_PATH}

    parted -s ${DEVICE_PATH} mklabel msdos
    parted -s ${DEVICE_PATH} unit KiB mkpart primary ${BOOT_SPACE_START} ${BOOT_SPACE_END}
    parted -s ${DEVICE_PATH} unit KiB mkpart primary ${ROOTFS_SPACE_START} ${ROOTFS_SPACE_END}
    parted -s ${DEVICE_PATH} unit KiB mkpart primary ${RECOVERFS_SPACE_START} ${RECOVERFS_SPACE_END}
    parted -s ${DEVICE_PATH} unit KiB mkpart primary ${RECOVERFS_SPACE_END} $(expr ${SDCARD_SIZE} - 1)
    parted ${DEVICE_PATH} print

    mkfs.ext2 -I128 -L "boot-${LABEL}" ${DEVICE_PREFIX}1
    mkfs.ext4 -L "data-${LABEL}" ${DEVICE_PREFIX}4
    tune2fs -L "boot-${LABEL}" -o discard,block_validity ${DEVICE_PREFIX}1
    tune2fs -L "data-${LABEL}" -o journal_data,discard,block_validity ${DEVICE_PREFIX}4

    mount ${DEVICE_PREFIX}1 ${BOOT_MNT}
    mount ${DEVICE_PREFIX}4 ${DATA_MNT}
}

flash_uboot () {
    dd if=${IMAGE_CONTAINER}/${UBOOT_BIN} of=${DEVICE_PATH} seek=2 skip=${UBOOT_PADDING} bs=512
}

flash_rootfs () {
    dd if=${IMAGE_CONTAINER}/${ROOTIMG} of=${DEVICE_PREFIX}2 bs=1M
}

flash_recoveryfs () {
    dd if=${IMAGE_CONTAINER}/${RECOVERIMG} of=${DEVICE_PREFIX}3 bs=1M
}

update_fs () {
    tune2fs -L "boot-${LABEL}" -o discard,block_validity ${DEVICE_PREFIX}1
    tune2fs -L "data-${LABEL}" -o journal_data,discard,block_validity ${DEVICE_PREFIX}4
}

require_update_uboot () {
    $(echo "@BOOTABLE_ROOT_DEVS@" | egrep -q -E "\<${WANTED_ROOT_DEV}\>") || return 1
    if test "@INTERNAL_ROOT_DEV@" = "${WANTED_ROOT_DEV}"
    then
        installed_sysimg_version=`fw_printenv -n sysimg_version`
        test -z "${installed_sysimg_version}" && return 0
        $(perl -Mversion -e 'exit(version->parse("'${U_BOOT_MIN_SYSIMG_VER}'") <= version->parse("'${installed_sysimg_version}'"))') || return 1
    fi
    return 0
}

update_uboot () {
    dd of=${DEVICE_PATH} seek=2 skip=${UBOOT_PADDING} bs=512
}

uboot_setenv () {
    # XXX u-boot-fw_utils 2016.01 with -c /path/to/config changes everything, here
    if test "@INTERNAL_ROOT_DEV@" = "${WANTED_ROOT_DEV}"
    then
	blkdiscard ${DEVICE_PATH} --offset 0x80000 --length 0x2000
	fw_setenv sysimg_version ${SYSIMG_VER}
    fi
}

wipe_rootfs () {
    blkdiscard ${DEVICE_PREFIX}2
}

update_rootfs () {
    dd of=${DEVICE_PREFIX}2 bs=1M
}

wipe_recoveryfs () {
    blkdiscard ${DEVICE_PREFIX}3
}

update_recoveryfs () {
    dd of=${DEVICE_PREFIX}3 bs=1M
}
